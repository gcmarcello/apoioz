generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), unaccent(map: "unaccent", schema: "extensions")]
  schemas    = ["elections", "extensions", "polls", "public"]
}

model User {
  id               String             @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name             String
  email            String             @unique
  phone            String?            @unique
  password         String?
  role             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  campaign         Campaign[]
  PasswordRecovery PasswordRecovery[]
  supporter        Supporter[]        @relation("UserToSupporter")
  info             UserInfo           @relation(fields: [infoId], references: [id])
  infoId           String             @unique @db.Uuid

  @@schema("public")
}

model UserInfo {
  id        String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user      User?
  partyId   String?
  zoneId    String?   @db.Uuid
  sectionId String?   @db.Uuid
  birthDate DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  party     Party?    @relation(fields: [partyId], references: [id])
  Section   Section?  @relation(fields: [sectionId], references: [id])
  Zone      Zone?     @relation(fields: [zoneId], references: [id])

  @@schema("public")
}

model Party {
  id       String     @id @unique
  number   Int        @unique
  name     String
  ideology String
  UserInfo UserInfo[]

  @@schema("elections")
}

model Campaign {
  id         String        @id @default(uuid()) @db.Uuid
  options    Json?
  name       String
  year       String
  slug       String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  userId     String        @db.Uuid
  cityId     String?       @db.VarChar
  stateId    String?       @db.VarChar
  type       CampaignTypes
  Poll       Poll[]
  city       City?         @relation(fields: [cityId], references: [id])
  state      State?        @relation(fields: [stateId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  Event      Event[]
  InviteCode InviteCode[]
  supporters Supporter[]

  @@schema("public")
}

model Supporter {
  id                         String                     @id @default(uuid()) @db.Uuid
  campaignId                 String                     @db.Uuid
  userId                     String                     @db.Uuid
  referralId                 String?                    @db.Uuid
  level                      Int
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime?                  @updatedAt
  sectionId                  String?                    @db.Uuid
  zoneId                     String?                    @db.Uuid
  PollAnswer                 PollAnswer[]
  Event                      Event[]
  InviteCode                 InviteCode[]
  campaign                   Campaign                   @relation(fields: [campaignId], references: [id])
  referral                   Supporter?                 @relation("Referrals", fields: [referralId], references: [id])
  referred                   Supporter[]                @relation("Referrals")
  Section                    Section?                   @relation(fields: [sectionId], references: [id])
  user                       User                       @relation("UserToSupporter", fields: [userId], references: [id])
  Zone                       Zone?                      @relation(fields: [zoneId], references: [id])
  SupporterGroup             SupporterGroup?
  supporterGroupsMemberships SupporterGroupMembership[]

  @@schema("public")
}

model SupporterGroup {
  id          String                     @id @default(uuid()) @db.Uuid
  ownerId     String                     @unique @db.Uuid
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime?                  @updatedAt
  owner       Supporter                  @relation(fields: [ownerId], references: [id])
  memberships SupporterGroupMembership[]

  @@schema("public")
}

model SupporterGroupMembership {
  supporterId      String         @db.Uuid
  supporterGroupId String         @db.Uuid
  id               String         @id @default(uuid()) @db.Uuid
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  supporterGroup   SupporterGroup @relation(fields: [supporterGroupId], references: [id])
  supporter        Supporter      @relation(fields: [supporterId], references: [id])

  @@schema("public")
}

model Event {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @db.VarChar
  description  String
  location     String    @db.VarChar
  dateStart    DateTime  @db.Timestamptz(3)
  dateEnd      DateTime  @db.Timestamptz(3)
  campaignId   String    @db.Uuid
  hostId       String    @db.Uuid
  status       String    @db.VarChar
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  observations String?
  Campaign     Campaign  @relation(fields: [campaignId], references: [id])
  Supporter    Supporter @relation(fields: [hostId], references: [id])

  @@schema("public")
}

model InviteCode {
  id          String    @id @default(uuid()) @db.Uuid
  campaignId  String    @db.Uuid
  referralId  String    @db.Uuid
  expiresAt   DateTime  @db.Timestamptz(3)
  enteredAt   DateTime? @db.Timestamptz(3)
  submittedAt DateTime? @db.Timestamptz(3)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  referral    Supporter @relation(fields: [referralId], references: [id])

  @@schema("public")
}

model Address {
  id           String    @id(map: "PK_2a6880f71a7f8d1c677bb2a32a8") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  lat          String?   @db.VarChar
  lng          String?   @db.VarChar
  address      String?   @db.VarChar
  location     String?   @db.VarChar
  neighborhood String?   @db.VarChar
  zipcode      String?   @db.VarChar
  cityId       String    @db.VarChar
  City         City      @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_3624b3085165071df70276a4000")
  Section      Section[]

  @@schema("elections")
}

model City {
  id           String         @id(map: "PK_74346041a3332b7880d76c610f3") @db.VarChar
  name         String         @db.VarChar
  stateId      String         @db.VarChar
  Address      Address[]
  State        State          @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_e99de556ee56afe72154f3ed04a")
  City_To_Zone City_To_Zone[]
  Neighborhood Neighborhood[]
  Campaign     Campaign[]

  @@schema("elections")
}

model City_To_Zone {
  id     String @id(map: "PK_a48d0744c1d2890620d19665086") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  cityId String @db.VarChar
  zoneId String @db.Uuid
  City   City   @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1408688a13ad486e02cf6a50a03")
  Zone   Zone   @relation(fields: [zoneId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ef5c307ae0af73209fd208026a5")

  @@schema("elections")
}

model Section {
  id        String      @id(map: "PK_c4cd691e8a76eaaffa862f0fb25") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  number    Int
  addressId String?     @db.Uuid
  zoneId    String      @db.Uuid
  Address   Address?    @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_3ff69a4fa9a649daf3fa869bcbc")
  Zone      Zone        @relation(fields: [zoneId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_deab69c6c23c07560c03943b6aa")
  Supporter Supporter[]
  UserInfo  UserInfo[]

  @@schema("elections")
}

model State {
  id       String     @id(map: "PK_be2ef64a21d36522aa1ecb24886") @db.VarChar
  code     String     @db.VarChar
  name     String     @db.VarChar
  City     City[]
  Zone     Zone[]
  Campaign Campaign[]

  @@schema("elections")
}

model Zone {
  id           String         @id(map: "PK_3a6cfcf317ea20ea08421eab0a5") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  number       Int
  stateId      String         @db.VarChar
  geoJSON      Json?
  City_To_Zone City_To_Zone[]
  Section      Section[]
  State        State          @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_943d589a985354af23c8330abde")
  Supporter    Supporter[]
  UserInfo     UserInfo[]

  @@schema("elections")
}

model Neighborhood {
  id      String @id @unique @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name    String @db.VarChar
  cityId  String @db.VarChar
  geoJSON Json?
  City    City   @relation(fields: [cityId], references: [id])

  @@schema("elections")
}

model PasswordRecovery {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  createdAt DateTime  @default(now())
  expiresAt DateTime  @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@schema("public")
}

model Poll {
  id             String         @id @unique @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  title          String         @db.VarChar
  campaignId     String         @db.Uuid
  activeAtSignUp Boolean        @default(false)
  active         Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  campaign       Campaign       @relation(fields: [campaignId], references: [id])
  PollAnswer     PollAnswer[]
  PollQuestion   PollQuestion[]

  @@schema("polls")
}

model PollQuestion {
  id                   String       @id @unique @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  pollId               String?      @db.Uuid
  question             String       @db.VarChar
  allowMultipleAnswers Boolean      @default(false)
  allowFreeAnswer      Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime?    @updatedAt
  active               Boolean      @default(true)
  PollAnswer           PollAnswer[]
  PollOption           PollOption[]
  poll                 Poll?        @relation(fields: [pollId], references: [id])

  @@schema("polls")
}

model PollOption {
  id         String        @id @unique @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  questionId String?       @db.Uuid
  name       String        @db.VarChar
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  active     Boolean       @default(true)
  question   PollQuestion? @relation(fields: [questionId], references: [id])

  @@schema("polls")
}

model PollAnswer {
  id           String       @id @unique @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  answer       Json?
  pollId       String       @db.Uuid
  questionId   String       @db.Uuid
  supporterId  String?      @db.Uuid
  ip           String?      @db.VarChar
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  poll         Poll         @relation(fields: [pollId], references: [id])
  PollQuestion PollQuestion @relation(fields: [questionId], references: [id])
  supporter    Supporter?   @relation(fields: [supporterId], references: [id])

  @@schema("polls")
}

enum CampaignTypes {
  conselheiro_tutelar
  vereador
  prefeito
  deputado_estadual
  deputado_federal
  senador
  governador
  presidente

  @@schema("public")
}
